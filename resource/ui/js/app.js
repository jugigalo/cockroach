// Generated by tsc.
// source: cockroach/resource/us/ts/...
// DO NOT EDIT!
//
// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Authors: Bram Gruneir (bram+code@cockroachlabs.com)
//		    Andrew Bonventre (andybons@gmail.com)
//		    Matt Tracy (matt@cockroachlabs.com)
//
var headerDescription = 'This file is designed to add the header to the top of the combined js file.';
/// <reference path="../typings/mithriljs/mithril.d.ts" />
var Utils;
(function (Utils) {
    var QueryCache = (function () {
        function QueryCache(_query) {
            this._query = _query;
            this._result = null;
            this._error = null;
            this._epoch = 0;
            this.refresh();
        }
        QueryCache.prototype.refresh = function () {
            this.processOutstanding();
            if (!this._outstanding) {
                this._outstanding = {
                    result: this._query(),
                    error: m.prop(null),
                };
                this._outstanding.result.then(null, this._outstanding.error);
            }
        };
        QueryCache.prototype.setQuery = function (q) {
            this._query = q;
        };
        QueryCache.prototype.hasData = function () {
            this.processOutstanding();
            return this._epoch > 0;
        };
        QueryCache.prototype.result = function () {
            this.processOutstanding();
            return this._result;
        };
        QueryCache.prototype.error = function () {
            this.processOutstanding();
            return this._error;
        };
        QueryCache.prototype.epoch = function () {
            this.processOutstanding();
            return this._epoch;
        };
        QueryCache.prototype.processOutstanding = function () {
            if (this._outstanding) {
                var completed = (this._outstanding.error() != null || this._outstanding.result() != null);
                if (completed) {
                    this._result = this._outstanding.result();
                    this._error = this._outstanding.error();
                    this._outstanding = null;
                    this._epoch++;
                }
            }
        };
        return QueryCache;
    })();
    Utils.QueryCache = QueryCache;
})(Utils || (Utils = {}));
// source: models/proto.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
var Models;
(function (Models) {
    var Proto;
    (function (Proto) {
        function NewMVCCStats() {
            return {
                live_bytes: 0,
                key_bytes: 0,
                val_bytes: 0,
                intent_bytes: 0,
                live_count: 0,
                key_count: 0,
                val_count: 0,
                intent_count: 0,
                intent_age: 0,
                gc_bytes_age: 0,
                sys_bytes: 0,
                sys_count: 0,
                last_update_nanos: 0,
            };
        }
        Proto.NewMVCCStats = NewMVCCStats;
        function AccumulateMVCCStats(dest, src) {
            dest.live_bytes += src.live_bytes;
            dest.key_bytes += src.key_bytes;
            dest.val_bytes += src.val_bytes;
            dest.intent_bytes += src.intent_bytes;
            dest.live_count += src.live_count;
            dest.key_count += src.key_count;
            dest.val_count += src.val_count;
            dest.intent_count += src.intent_count;
            dest.intent_age += src.intent_age;
            dest.gc_bytes_age += src.gc_bytes_age;
            dest.sys_bytes += src.sys_bytes;
            dest.sys_count += src.sys_count;
            dest.last_update_nanos = Math.max(dest.last_update_nanos, src.last_update_nanos);
        }
        Proto.AccumulateMVCCStats = AccumulateMVCCStats;
        function AccumulateStatus(dest, src) {
            dest.range_count += src.range_count;
            dest.leader_range_count += src.leader_range_count;
            dest.replicated_range_count += src.replicated_range_count;
            dest.available_range_count += src.available_range_count;
            dest.updated_at = Math.max(dest.updated_at, src.updated_at);
            AccumulateMVCCStats(dest.stats, src.stats);
        }
        Proto.AccumulateStatus = AccumulateStatus;
        (function (QueryAggregator) {
            QueryAggregator[QueryAggregator["AVG"] = 1] = "AVG";
            QueryAggregator[QueryAggregator["AVG_RATE"] = 2] = "AVG_RATE";
        })(Proto.QueryAggregator || (Proto.QueryAggregator = {}));
        var QueryAggregator = Proto.QueryAggregator;
    })(Proto = Models.Proto || (Models.Proto = {}));
})(Models || (Models = {}));
// source: util/chainprop.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    function chainProp(_this, val) {
        var obj = val;
        return function (value) {
            if (value === undefined) {
                return obj;
            }
            obj = value;
            return _this;
        };
    }
    Utils.chainProp = chainProp;
})(Utils || (Utils = {}));
// source: util/convert.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    function milliToNanos(millis) {
        return millis * 1.0e6;
    }
    Utils.milliToNanos = milliToNanos;
})(Utils || (Utils = {}));
// source: models/timeseries.ts
// TODO(mrtracy): rename to metrics.ts.
/// <reference path="proto.ts" />
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../util/chainprop.ts" />
/// <reference path="../util/convert.ts" />
// Author: Matt Tracy (matt@cockroachlabs.com)
var Models;
(function (Models) {
    var Metrics;
    (function (Metrics) {
        var select;
        (function (select) {
            var AvgSelector = (function () {
                function AvgSelector(series_name) {
                    var _this = this;
                    this.series_name = series_name;
                    this.title = Utils.chainProp(this, this.series_name);
                    this.request = function () {
                        return {
                            name: _this.series_name,
                            aggregator: Models.Proto.QueryAggregator.AVG,
                        };
                    };
                }
                return AvgSelector;
            })();
            var AvgRateSelector = (function () {
                function AvgRateSelector(series_name) {
                    var _this = this;
                    this.series_name = series_name;
                    this.title = Utils.chainProp(this, this.series_name);
                    this.request = function () {
                        return {
                            name: _this.series_name,
                            aggregator: Models.Proto.QueryAggregator.AVG_RATE,
                        };
                    };
                }
                return AvgRateSelector;
            })();
            function Avg(series) {
                return new AvgSelector(series);
            }
            select.Avg = Avg;
            function AvgRate(series) {
                return new AvgRateSelector(series);
            }
            select.AvgRate = AvgRate;
        })(select = Metrics.select || (Metrics.select = {}));
        var time;
        (function (time) {
            function Recent(duration) {
                return {
                    timespan: function () {
                        var endTime = new Date();
                        var startTime = new Date(endTime.getTime() - duration);
                        return [startTime.getTime(), endTime.getTime()];
                    }
                };
            }
            time.Recent = Recent;
        })(time = Metrics.time || (Metrics.time = {}));
        var Query = (function () {
            function Query(_selectors) {
                var _this = this;
                this._selectors = _selectors;
                this.timespan = Utils.chainProp(this, time.Recent(10 * 60 * 1000));
                this.title = Utils.chainProp(this, "Query Title");
                this.execute = function () {
                    var s = _this.timespan().timespan();
                    var req = {
                        start_nanos: Utils.milliToNanos(s[0]),
                        end_nanos: Utils.milliToNanos(s[1]),
                        queries: [],
                    };
                    for (var i = 0; i < _this._selectors.length; i++) {
                        req.queries.push(_this._selectors[i].request());
                    }
                    return Query.dispatch_query(req);
                };
            }
            Query.dispatch_query = function (q) {
                var url = "/ts/query";
                return m.request({ url: url, method: "POST", extract: nonJsonErrors, data: q })
                    .then(function (d) {
                    if (!d.results) {
                        d.results = [];
                    }
                    d.results.forEach(function (r) {
                        if (!r.datapoints) {
                            r.datapoints = [];
                        }
                    });
                    return d;
                });
            };
            return Query;
        })();
        Metrics.Query = Query;
        function NewQuery() {
            var selectors = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                selectors[_i - 0] = arguments[_i];
            }
            return new Query(selectors);
        }
        Metrics.NewQuery = NewQuery;
        function nonJsonErrors(xhr, opts) {
            return xhr.status > 200 ? JSON.stringify(xhr.responseText) : xhr.responseText;
        }
    })(Metrics = Models.Metrics || (Models.Metrics = {}));
})(Models || (Models = {}));
// source: components/metrics.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../typings/d3/d3.d.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="../models/timeseries.ts" />
var Components;
(function (Components) {
    var Metrics;
    (function (Metrics) {
        var LineGraph;
        (function (LineGraph) {
            var Controller = (function () {
                function Controller(vm) {
                    var _this = this;
                    this.vm = vm;
                    this.chart = nv.models.lineChart()
                        .x(function (d) { return new Date(d.timestamp_nanos / 1.0e6); })
                        .y(function (d) { return d.value; })
                        .useInteractiveGuideline(true)
                        .showLegend(true)
                        .showYAxis(true)
                        .showXAxis(true)
                        .xScale(d3.time.scale());
                    this.drawGraph = function (element, isInitialized, context) {
                        if (!isInitialized) {
                            nv.addGraph(_this.chart);
                        }
                        if (_this.shouldRenderData()) {
                            var formattedData = [];
                            if (_this.vm.query.result()) {
                                formattedData = _this.vm.query.result().results.map(function (d) {
                                    return {
                                        values: d.datapoints,
                                        key: d.name,
                                        color: Controller.colors(d.name),
                                        area: true,
                                        fillOpacity: .1,
                                    };
                                });
                            }
                            d3.select(element)
                                .datum(formattedData)
                                .transition().duration(500)
                                .call(_this.chart);
                        }
                    };
                    this.chart.xAxis
                        .tickFormat(d3.time.format('%I:%M:%S'))
                        .showMaxMin(false);
                }
                Controller.prototype.shouldRenderData = function () {
                    var epoch = this.vm.query.epoch();
                    if (epoch > this.vm.lastEpoch) {
                        this.vm.lastEpoch = epoch;
                        return true;
                    }
                    return false;
                };
                Controller.prototype.hasData = function () {
                    return this.vm.query.epoch() > 0;
                };
                Controller.colors = d3.scale.category10();
                return Controller;
            })();
            function controller(model) {
                return new Controller(model);
            }
            LineGraph.controller = controller;
            function view(ctrl) {
                if (ctrl.hasData()) {
                    return m(".linegraph", { style: "width:500px;height:300px;" }, m("svg.graph", { config: ctrl.drawGraph }));
                }
                else {
                    return m("", "loading...");
                }
            }
            LineGraph.view = view;
            function create(query, key) {
                var vm = { lastEpoch: 0, query: query };
                if (key) {
                    vm.key = key;
                }
                return m.component(LineGraph, vm);
            }
            LineGraph.create = create;
        })(LineGraph = Metrics.LineGraph || (Metrics.LineGraph = {}));
    })(Metrics = Components.Metrics || (Components.Metrics = {}));
})(Components || (Components = {}));
// source: pages/graph.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../typings/d3/d3.d.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="../models/timeseries.ts" />
/// <reference path="../components/metrics.ts" />
var AdminViews;
(function (AdminViews) {
    var Graph;
    (function (Graph) {
        var Page;
        (function (Page) {
            var metrics = Models.Metrics;
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.timespan = metrics.time.Recent(10 * 60 * 1000);
                    this.sumquery = metrics.NewQuery(metrics.select.Avg("cr.node.calls.success.1").title("Successful calls"), metrics.select.Avg("cr.node.calls.error.1").title("Error calls"))
                        .timespan(this.timespan);
                    this.ratequery = metrics.NewQuery(metrics.select.AvgRate("cr.node.calls.success.1"))
                        .timespan(this.timespan);
                    this.toggleGraph = function () {
                        _this.showRates = !_this.showRates;
                        if (_this.showRates) {
                            _this.manager.setQuery(_this.ratequery.execute);
                        }
                        else {
                            _this.manager.setQuery(_this.sumquery.execute);
                        }
                        _this.manager.refresh();
                    };
                    this.manager = new Utils.QueryCache(this.sumquery.execute);
                    this.manager.refresh();
                    this.interval = setInterval(function () { return _this.manager.refresh(); }, 10000);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this.interval);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            Page.controller = controller;
            function view(ctrl) {
                var buttonText;
                if (ctrl.showRates) {
                    buttonText = "Show Totals";
                }
                else {
                    buttonText = "Show Rates";
                }
                return m(".graphPage", [
                    m("H3", "Graph Demo"),
                    Components.Metrics.LineGraph.create(ctrl.manager),
                    Components.Metrics.LineGraph.create(ctrl.manager),
                    m("", m("input[type=button]", {
                        value: buttonText,
                        onclick: ctrl.toggleGraph,
                    })),
                ]);
            }
            Page.view = view;
        })(Page = Graph.Page || (Graph.Page = {}));
    })(Graph = AdminViews.Graph || (AdminViews.Graph = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/monitor.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
var AdminViews;
(function (AdminViews) {
    var Monitor;
    (function (Monitor) {
        var Page;
        (function (Page) {
            function controller() { }
            Page.controller = controller;
            function view() {
                return m("h3", "Monitor Placeholder");
            }
            Page.view = view;
        })(Page = Monitor.Page || (Monitor.Page = {}));
    })(Monitor = AdminViews.Monitor || (AdminViews.Monitor = {}));
})(AdminViews || (AdminViews = {}));
// source: models/stats.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="proto.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
var Models;
(function (Models) {
    var Stats;
    (function (Stats) {
        var kibi = 1024;
        var units = ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
        function FormatBytes(bytes) {
            if (Math.abs(bytes) < kibi) {
                return bytes + ' B';
            }
            var u = -1;
            do {
                bytes /= kibi;
                ++u;
            } while (Math.abs(bytes) >= kibi && u < units.length - 1);
            return bytes.toFixed(1) + ' ' + units[u];
        }
        Stats.FormatBytes = FormatBytes;
        var tableStyle = "border-collapse:collapse; border - spacing:0; border - color:#ccc";
        var thStyle = "font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#efefef;text-align:center";
        var tdStyleOddFirst = "font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#efefef;text-align:center";
        var tdStyleOdd = "font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#f9f9f9;text-align:center";
        var tdStyleEvenFirst = "font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#efefef;text-align:center";
        var tdStyleEven = "font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#ccc;color:#333;background-color:#fff;text-align:center";
        function CreateStatsTable(stats) {
            return m("div", [
                m("h3", "Statistics"),
                m("table", { style: tableStyle }, [
                    m("tr", [
                        m("th", { style: thStyle }, ""),
                        m("th", { style: thStyle }, "Key"),
                        m("th", { style: thStyle }, "Value"),
                        m("th", { style: thStyle }, "Live"),
                        m("th", { style: thStyle }, "Intent"),
                        m("th", { style: thStyle }, "System")
                    ]),
                    m("tr", [
                        m("td", { style: tdStyleOddFirst }, "Count"),
                        m("td", { style: tdStyleOdd }, stats.key_count),
                        m("td", { style: tdStyleOdd }, stats.val_count),
                        m("td", { style: tdStyleOdd }, stats.live_count),
                        m("td", { style: tdStyleOdd }, stats.intent_count),
                        m("td", { style: tdStyleOdd }, stats.sys_count)
                    ]),
                    m("tr", [
                        m("td", { style: tdStyleEvenFirst }, "Size"),
                        m("td", { style: tdStyleEven }, FormatBytes(stats.key_bytes)),
                        m("td", { style: tdStyleEven }, FormatBytes(stats.val_bytes)),
                        m("td", { style: tdStyleEven }, FormatBytes(stats.live_bytes)),
                        m("td", { style: tdStyleEven }, FormatBytes(stats.intent_bytes)),
                        m("td", { style: tdStyleEven }, FormatBytes(stats.sys_bytes))
                    ])
                ])
            ]);
        }
        Stats.CreateStatsTable = CreateStatsTable;
    })(Stats = Models.Stats || (Models.Stats = {}));
})(Models || (Models = {}));
// source: models/store_status.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../typings/d3/d3.d.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="stats.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
// Author: Matt Tracy (matt@cockroachlabs.com)
var Models;
(function (Models) {
    var Status;
    (function (Status) {
        function _availability(status) {
            if (status.leader_range_count == 0) {
                return "100%";
            }
            return Math.floor(status.available_range_count / status.leader_range_count * 100).toString() + "%";
        }
        function _replicated(status) {
            if (status.leader_range_count == 0) {
                return "100%";
            }
            return Math.floor(status.replicated_range_count / status.leader_range_count * 100).toString() + "%";
        }
        var _datetimeFormatter = d3.time.format("%Y-%m-%d %H:%M:%S");
        function _formatDate(nanos) {
            var datetime = new Date(nanos / 1.0e6);
            return _datetimeFormatter(datetime);
        }
        var Stores = (function () {
            function Stores() {
                this._data = new Utils.QueryCache(function () {
                    var url = "/_status/stores/";
                    return m.request({ url: url, method: "GET", extract: nonJsonErrors })
                        .then(function (results) {
                        var data = {};
                        results.d.forEach(function (status) {
                            var storeId = status.desc.store_id;
                            data[storeId] = status;
                        });
                        return data;
                    });
                });
            }
            Stores.prototype.GetStoreIds = function () {
                return Object.keys(this._data.result()).sort();
            };
            Stores.prototype.GetDesc = function (storeId) {
                return this._data.result()[storeId].desc;
            };
            Stores.prototype.refresh = function () {
                this._data.refresh();
            };
            Stores.prototype.Details = function (storeId) {
                var store = this._data.result()[storeId];
                if (store == null) {
                    return m("div", "No data present yet.");
                }
                return m("div", [
                    m("table", [
                        m("tr", [m("td", "Node Id:"), m("td", m("a[href=/nodes/" + store.desc.node.node_id + "]", { config: m.route }, store.desc.node.node_id))]),
                        m("tr", [m("td", "Node Network:"), m("td", store.desc.node.address.network)]),
                        m("tr", [m("td", "Node Address:"), m("td", store.desc.node.address.address)]),
                        m("tr", [m("td", "Started at:"), m("td", _formatDate(store.started_at))]),
                        m("tr", [m("td", "Updated at:"), m("td", _formatDate(store.updated_at))]),
                        m("tr", [m("td", "Ranges:"), m("td", store.range_count)]),
                        m("tr", [m("td", "Leader Ranges:"), m("td", store.leader_range_count)]),
                        m("tr", [m("td", "Available Ranges:"), m("td", store.available_range_count)]),
                        m("tr", [m("td", "Availablility:"), m("td", _availability(store))]),
                        m("tr", [m("td", "Under-Replicated Ranges:"), m("td", store.leader_range_count - store.replicated_range_count)]),
                        m("tr", [m("td", "Fully Replicated:"), m("td", _replicated(store))])
                    ]),
                    Models.Stats.CreateStatsTable(store.stats)
                ]);
            };
            Stores.prototype.AllDetails = function () {
                var status = {
                    range_count: 0,
                    updated_at: 0,
                    started_at: 0,
                    leader_range_count: 0,
                    replicated_range_count: 0,
                    available_range_count: 0,
                    stats: Models.Proto.NewMVCCStats()
                };
                var data = this._data.result();
                for (var storeId in data) {
                    var storeStatus = data[storeId];
                    Models.Proto.AccumulateStatus(status, storeStatus);
                }
                ;
                return m("div", [
                    m("h2", "Details"),
                    m("table", [
                        m("tr", [m("td", "Updated at:"), m("td", _formatDate(status.updated_at))]),
                        m("tr", [m("td", "Ranges:"), m("td", status.range_count)]),
                        m("tr", [m("td", "Leader Ranges:"), m("td", status.leader_range_count)]),
                        m("tr", [m("td", "Available Ranges:"), m("td", status.available_range_count)]),
                        m("tr", [m("td", "Availablility:"), m("td", _availability(status))]),
                        m("tr", [m("td", "Under-Replicated Ranges:"), m("td", status.leader_range_count - status.replicated_range_count)]),
                        m("tr", [m("td", "Fully Replicated:"), m("td", _replicated(status))])
                    ]),
                    Models.Stats.CreateStatsTable(status.stats)
                ]);
            };
            return Stores;
        })();
        Status.Stores = Stores;
        var Nodes = (function () {
            function Nodes() {
                this._data = new Utils.QueryCache(function () {
                    var url = "/_status/nodes/";
                    return m.request({ url: url, method: "GET", extract: nonJsonErrors })
                        .then(function (results) {
                        var data = {};
                        results.d.forEach(function (status) {
                            var nodeId = status.desc.node_id;
                            data[nodeId] = status;
                        });
                        return data;
                    });
                });
            }
            Nodes.prototype.GetNodeIds = function () {
                return Object.keys(this._data.result()).sort();
            };
            Nodes.prototype.GetDesc = function (nodeId) {
                return this._data.result()[nodeId].desc;
            };
            Nodes.prototype.refresh = function () {
                this._data.refresh();
            };
            Nodes.prototype.Details = function (nodeId) {
                var node = this._data.result()[nodeId];
                if (node == null) {
                    return m("div", "No data present yet.");
                }
                return m("div", [
                    m("table", [
                        m("tr", [m("td", "Stores (" + node.store_ids.length + "):"),
                            m("td", [node.store_ids.map(function (storeId) {
                                    return m("div", [
                                        m("a[href=/stores/" + storeId + "]", { config: m.route }, storeId),
                                        " "]);
                                })])
                        ]),
                        m("tr", [m("td", "Network:"), m("td", node.desc.address.network)]),
                        m("tr", [m("td", "Address:"), m("td", node.desc.address.address)]),
                        m("tr", [m("td", "Started at:"), m("td", _formatDate(node.started_at))]),
                        m("tr", [m("td", "Updated at:"), m("td", _formatDate(node.updated_at))]),
                        m("tr", [m("td", "Ranges:"), m("td", node.range_count)]),
                        m("tr", [m("td", "Leader Ranges:"), m("td", node.leader_range_count)]),
                        m("tr", [m("td", "Available Ranges:"), m("td", node.available_range_count)]),
                        m("tr", [m("td", "Availablility:"), m("td", _availability(node))]),
                        m("tr", [m("td", "Under-Replicated Ranges:"), m("td", node.leader_range_count - node.replicated_range_count)]),
                        m("tr", [m("td", "Fully Replicated:"), m("td", _replicated(node))])
                    ]),
                    Models.Stats.CreateStatsTable(node.stats)
                ]);
            };
            Nodes.prototype.AllDetails = function () {
                var status = {
                    range_count: 0,
                    updated_at: 0,
                    leader_range_count: 0,
                    replicated_range_count: 0,
                    available_range_count: 0,
                    stats: Models.Proto.NewMVCCStats(),
                };
                var data = this._data.result();
                for (var nodeId in data) {
                    var nodeStatus = data[nodeId];
                    Models.Proto.AccumulateStatus(status, nodeStatus);
                }
                ;
                return m("div", [
                    m("h2", "Details"),
                    m("table", [
                        m("tr", [m("td", "Updated at:"), m("td", _formatDate(status.updated_at))]),
                        m("tr", [m("td", "Ranges:"), m("td", status.range_count)]),
                        m("tr", [m("td", "Leader Ranges:"), m("td", status.leader_range_count)]),
                        m("tr", [m("td", "Available Ranges:"), m("td", status.available_range_count)]),
                        m("tr", [m("td", "Availablility:"), m("td", _availability(status))]),
                        m("tr", [m("td", "Under-Replicated Ranges:"), m("td", status.leader_range_count - status.replicated_range_count)]),
                        m("tr", [m("td", "Fully Replicated:"), m("td", _replicated(status))])
                    ]),
                    Models.Stats.CreateStatsTable(status.stats)
                ]);
            };
            return Nodes;
        })();
        Status.Nodes = Nodes;
        function nonJsonErrors(xhr, opts) {
            return xhr.status > 200 ? JSON.stringify(xhr.responseText) : xhr.responseText;
        }
    })(Status = Models.Status || (Models.Status = {}));
})(Models || (Models = {}));
// source: pages/nodes.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../models/status.ts" />
/// <reference path="../models/timeseries.ts" />
/// <reference path="../components/metrics.ts" />
var AdminViews;
(function (AdminViews) {
    var Nodes;
    (function (Nodes) {
        var metrics = Models.Metrics;
        var nodeStatuses = new Models.Status.Nodes();
        function _nodeMetric(nodeId, metric) {
            return "cr.node." + metric + "." + nodeId;
        }
        var NodesPage;
        (function (NodesPage) {
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype._refresh = function () {
                    nodeStatuses.refresh();
                };
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            NodesPage.controller = controller;
            function view(ctrl) {
                return m("div", [
                    m("h2", "Nodes List"),
                    m("ul", [
                        nodeStatuses.GetNodeIds().map(function (nodeId) {
                            var desc = nodeStatuses.GetDesc(nodeId);
                            return m("li", { key: desc.node_id }, m("div", [
                                m.trust("&nbsp;&bull;&nbsp;"),
                                m("a[href=/nodes/" + desc.node_id + "]", { config: m.route }, "Node:" + desc.node_id),
                                " with Address:" + desc.address.network + "-" + desc.address.address
                            ]));
                        }),
                    ]),
                    nodeStatuses.AllDetails()
                ]);
            }
            NodesPage.view = view;
        })(NodesPage = Nodes.NodesPage || (Nodes.NodesPage = {}));
        var NodePage;
        (function (NodePage) {
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this.charts = [];
                    this._nodeId = nodeId;
                    this._addChart(metrics.NewQuery(metrics.select.AvgRate(_nodeMetric(nodeId, "calls.success")))
                        .title("Successful Calls Rate"));
                    this._addChart(metrics.NewQuery(metrics.select.AvgRate(_nodeMetric(nodeId, "calls.error")))
                        .title("Error Calls Rate"));
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype._refresh = function () {
                    nodeStatuses.refresh();
                    for (var i = 0; i < this.charts.length; i++) {
                        this.charts[i].Result.refresh();
                    }
                };
                Controller.prototype._addChart = function (q) {
                    this.charts.push({
                        Query: q,
                        Result: new Utils.QueryCache(q.execute),
                    });
                };
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                var nodeId = m.route.param("node_id");
                return new Controller(nodeId);
            }
            NodePage.controller = controller;
            function view(ctrl) {
                var nodeId = m.route.param("node_id");
                return m("div", [
                    m("h2", "Node Status"),
                    m("div", [
                        m("h3", "Node: " + nodeId),
                        nodeStatuses.Details(nodeId)
                    ]),
                    m(".charts", ctrl.charts.map(function (chart) {
                        return m("", { style: "float:left" }, [
                            m("h4", chart.Query.title()),
                            Components.Metrics.LineGraph.create(chart.Result)
                        ]);
                    }))
                ]);
            }
            NodePage.view = view;
        })(NodePage = Nodes.NodePage || (Nodes.NodePage = {}));
    })(Nodes = AdminViews.Nodes || (AdminViews.Nodes = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/rest_explorer.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
var AdminViews;
(function (AdminViews) {
    var RestExplorer;
    (function (RestExplorer) {
        var Model;
        (function (Model) {
            Model.singleKey = m.prop("");
            Model.singleValue = m.prop("");
            Model.singleCounter = m.prop(0);
            Model.rangeStart = m.prop("");
            Model.rangeEnd = m.prop("");
            Model.responseLog = m.prop([]);
            function logResponse(xhr, opts) {
                var data;
                if (xhr.responseType === "json") {
                    data = JSON.stringify(xhr.response);
                }
                else {
                    data = xhr.responseText;
                }
                data = data.length > 0 ? data : "(no response body)";
                data = ['[', opts.method, '] ', xhr.status, ' ', opts.url, ': ', data].join('');
                Model.responseLog().push(data);
                return JSON.stringify(data);
            }
            function scan(method) {
                var endpoint = "/kv/rest/range?start=" + encodeURIComponent(Model.rangeStart());
                if (!!Model.rangeEnd()) {
                    endpoint += '&end=' + encodeURIComponent(Model.rangeEnd());
                }
                return m.request({
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                });
            }
            Model.scan = scan;
            function entry(method) {
                var endpoint = "/kv/rest/entry/" + Model.singleKey();
                var request = {
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                    serialize: function (data) { return data; },
                };
                if (method === "POST") {
                    request.config = function (xhr, opts) {
                        xhr.setRequestHeader("Content-Type", "text/plain; charset=UTF-8");
                        return xhr;
                    };
                    request.data = Model.singleValue();
                }
                return m.request(request);
            }
            Model.entry = entry;
            function counter(method) {
                var endpoint = "/kv/rest/counter/" + Model.singleKey();
                var request = {
                    method: method,
                    url: endpoint,
                    extract: logResponse,
                    serialize: function (data) { return data; },
                };
                if (method === "POST") {
                    request.config = function (xhr, opts) {
                        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
                        return xhr;
                    };
                    request.data = Model.singleCounter();
                }
                return m.request(request);
            }
            Model.counter = counter;
            function clearLog() {
                Model.responseLog([]);
            }
            Model.clearLog = clearLog;
            ;
        })(Model || (Model = {}));
        function button(text, onclick, disabled) {
            return m("input[type=button]", {
                value: text,
                disabled: disabled(),
                onclick: onclick,
            });
        }
        function field(text, value, disabled) {
            return m("input[type=text]", {
                placeholder: text,
                disabled: disabled(),
                value: value(),
                onchange: m.withAttr("value", value),
            });
        }
        var EntryComponent;
        (function (EntryComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.key = Model.singleKey;
                    this.val = Model.singleValue;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.post = function () { return _this.request("POST"); };
                    this.head = function () { return _this.request("HEAD"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.entry(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            EntryComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "K/V Pair"),
                    m("form", [
                        field("Key", ctrl.key, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("Value", ctrl.val, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Head", ctrl.head, ctrl.responsePending),
                        button("Put", ctrl.post, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            EntryComponent.view = view;
        })(EntryComponent || (EntryComponent = {}));
        var RangeComponent;
        (function (RangeComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.rangeStart = Model.rangeStart;
                    this.rangeEnd = Model.rangeEnd;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.scan(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            RangeComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "Range"),
                    m("form", [
                        field("Start", ctrl.rangeStart, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("End", ctrl.rangeEnd, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            RangeComponent.view = view;
        })(RangeComponent || (RangeComponent = {}));
        var CounterComponent;
        (function (CounterComponent) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.responsePending = m.prop(false);
                    this.key = Model.singleKey;
                    this.val = Model.singleCounter;
                    this.complete = function () { return _this.responsePending(false); };
                    this.get = function () { return _this.request("GET"); };
                    this.post = function () { return _this.request("POST"); };
                    this.head = function () { return _this.request("HEAD"); };
                    this.delete = function () { return _this.request("DELETE"); };
                }
                Controller.prototype.request = function (method) {
                    this.responsePending(true);
                    Model.counter(method).then(this.complete, this.complete);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            CounterComponent.controller = controller;
            function view(ctrl) {
                return m("section.restExplorerControls-control", [
                    m("h3", "Counter"),
                    m("form", [
                        field("Key", ctrl.key, ctrl.responsePending),
                        m.trust("&rarr;"),
                        field("Value", ctrl.val, ctrl.responsePending),
                        button("Get", ctrl.get, ctrl.responsePending),
                        button("Head", ctrl.head, ctrl.responsePending),
                        button("Put", ctrl.post, ctrl.responsePending),
                        button("Delete", ctrl.delete, ctrl.responsePending),
                    ])
                ]);
            }
            CounterComponent.view = view;
        })(CounterComponent || (CounterComponent = {}));
        var LogComponent;
        (function (LogComponent) {
            function controller() {
                return {
                    log: Model.responseLog,
                    clear: Model.clearLog,
                };
            }
            LogComponent.controller = controller;
            function view(ctrl) {
                return m(".restExplorerLog", [
                    m("h3", "Console"),
                    button("Clear", ctrl.clear, function () { return false; }),
                    ctrl.log().map(function (str) {
                        return m("", str);
                    })
                ]);
            }
            LogComponent.view = view;
        })(LogComponent || (LogComponent = {}));
        var Page;
        (function (Page) {
            function controller() { }
            Page.controller = controller;
            function view() {
                return m(".restExplorer", [
                    m(".restExplorerControls", [
                        EntryComponent,
                        RangeComponent,
                        CounterComponent,
                    ]),
                    LogComponent,
                ]);
            }
            Page.view = view;
        })(Page = RestExplorer.Page || (RestExplorer.Page = {}));
    })(RestExplorer = AdminViews.RestExplorer || (AdminViews.RestExplorer = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/stores.ts
/// <reference path="../typings/mithriljs/mithril.d.ts" />
/// <reference path="../models/status.ts" />
/// <reference path="../models/timeseries.ts" />
/// <reference path="../components/metrics.ts" />
var AdminViews;
(function (AdminViews) {
    var Stores;
    (function (Stores) {
        var metrics = Models.Metrics;
        var storeStatuses = new Models.Status.Stores();
        function _storeMetric(storeId, metric) {
            return "cr.store." + metric + "." + storeId;
        }
        var StoresPage;
        (function (StoresPage) {
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype._refresh = function () {
                    storeStatuses.refresh();
                };
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            StoresPage.controller = controller;
            function view(ctrl) {
                return m("div", [
                    m("h2", "Nodes List"),
                    m("ul", [
                        storeStatuses.GetStoreIds().map(function (storeId) {
                            var desc = storeStatuses.GetDesc(storeId);
                            return m("li", { key: desc.store_id }, m("div", [
                                m.trust("&nbsp;&bull;&nbsp;"),
                                m("a[href=/stores/" + storeId + "]", { config: m.route }, "Store:" + storeId),
                                " on ",
                                m("a[href=/nodes/" + desc.node.node_id + "]", { config: m.route }, "Node:" + desc.node.node_id),
                                " with Address:" + desc.node.address.network + "-" + desc.node.address.address
                            ]));
                        }),
                    ]),
                    storeStatuses.AllDetails()
                ]);
            }
            StoresPage.view = view;
        })(StoresPage = Stores.StoresPage || (Stores.StoresPage = {}));
        var StorePage;
        (function (StorePage) {
            var Controller = (function () {
                function Controller(storeId) {
                    var _this = this;
                    this.charts = [];
                    this._storeId = storeId;
                    this._addChart(metrics.NewQuery(metrics.select.Avg(_storeMetric(storeId, "keycount")))
                        .title("Key Count"));
                    this._addChart(metrics.NewQuery(metrics.select.Avg(_storeMetric(storeId, "valcount")))
                        .title("Value Count"));
                    this._addChart(metrics.NewQuery(metrics.select.Avg(_storeMetric(storeId, "livecount")))
                        .title("Live Value Count"));
                    this._addChart(metrics.NewQuery(metrics.select.Avg(_storeMetric(storeId, "intentcount")))
                        .title("Intent Count"));
                    this._addChart(metrics.NewQuery(metrics.select.Avg(_storeMetric(storeId, "ranges")))
                        .title("Range Count"));
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype._refresh = function () {
                    storeStatuses.refresh();
                    for (var i = 0; i < this.charts.length; i++) {
                        this.charts[i].Result.refresh();
                    }
                };
                Controller.prototype._addChart = function (q) {
                    this.charts.push({
                        Query: q,
                        Result: new Utils.QueryCache(q.execute),
                    });
                };
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                var storeId = m.route.param("store_id");
                return new Controller(storeId);
            }
            StorePage.controller = controller;
            function view(ctrl) {
                var storeId = m.route.param("store_id");
                return m("div", [
                    m("h2", "Store Status"),
                    m("div", [
                        m("h3", "Store: " + storeId),
                        storeStatuses.Details(storeId)
                    ]),
                    m(".charts", ctrl.charts.map(function (chart) {
                        return m("", { style: "float:left" }, [
                            m("h4", chart.Query.title()),
                            Components.Metrics.LineGraph.create(chart.Result)
                        ]);
                    }))
                ]);
            }
            StorePage.view = view;
        })(StorePage = Stores.StorePage || (Stores.StorePage = {}));
    })(Stores = AdminViews.Stores || (AdminViews.Stores = {}));
})(AdminViews || (AdminViews = {}));
// source: app.ts
/// <reference path="typings/mithriljs/mithril.d.ts" />
/// <reference path="pages/graph.ts" />
/// <reference path="pages/monitor.ts" />
/// <reference path="pages/nodes.ts" />
/// <reference path="pages/rest_explorer.ts" />
/// <reference path="pages/stores.ts" />
m.route.mode = "hash";
m.route(document.getElementById("root"), "/rest-explorer", {
    "/graph": AdminViews.Graph.Page,
    "/monitor": AdminViews.Monitor.Page,
    "/node": AdminViews.Nodes.NodesPage,
    "/nodes": AdminViews.Nodes.NodesPage,
    "/node/:node_id": AdminViews.Nodes.NodePage,
    "/nodes/:node_id": AdminViews.Nodes.NodePage,
    "/rest-explorer": AdminViews.RestExplorer.Page,
    "/store": AdminViews.Stores.StorePage,
    "/stores": AdminViews.Stores.StoresPage,
    "/store/:store_id": AdminViews.Stores.StorePage,
    "/stores/:store_id": AdminViews.Stores.StorePage
});
